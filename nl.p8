pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- number lunchers
-- by kisonecat

pl = {}
pl.x = 16
pl.y = 16
pl.dx = 0
pl.dy = 0
pl.left = false
pl.bounce = 0
pl.offset = 0

-- position of board
cx = 6
cy = 5
originx = 16
originy = 24
making_troggle = -1

function congruence(residue,modulus)
   return function(n)
      return (n % modulus) == residue
   end
end

function intersection(f,g)
   return function(n)
      if f(n) == nil then return nil end
      if g(n) == nil then return nil end
      return f(n) and g(n)
   end
end

function bounded(a,b)
   return function(n)
      if n < a then return nil end
      if n > b then return nil end
      return true
   end
end

levels = {
   { title = "odd numbers",
     f = intersection(bounded(0,30),congruence(1,2)),
     troggle_count = 10,
   },
   { title = "multiples of 3",
     f = intersection(bounded(1,20),congruence(0,3)),     
     troggle_count = 2,     
   },
   { title = "multiples of 5",
     f = intersection(bounded(1,99),congruence(0,5)),
     troggle_count = 3,     
   },
}

function die()
   pl.dead = true
   if lives == 0 then
      game_over = true
      sfx(2)
      sfx(4)
   else
      sfx(2)      
   end
end

function eat(number)
   if levels[level].f(number) == false then
      die()
   else
      score = score + 5 * level
      sfx(1)	 
   end
end

function draw_troggle(t)
   local bottom = 16

   if t.dx == 0 and t.dy == 0 then
      bottom = 16
   else
      if (t.x + t.y) % 4 == 2 then
	 bottom = 2
      end
      if (t.x + t.y) % 4 == 0 then
	 bottom = 18
      end
   end
   
   pal(8,0)
   if t.down then
      spr(36, t.x, t.y, 2, 1)
      spr(bottom + 36, t.x, t.y + 8, 2, 1)
      return
   end

   if t.up then
      spr(40, t.x, t.y, 2, 1) 
      spr(bottom + 40, t.x, t.y + 8, 2, 1)
      return
   end

   spr(32, t.x, t.y, 2, 1, t.left)      
   spr(bottom + 32, t.x, t.y + 8, 2, 1, t.left)
end

function move_troggle(t)
   t.x = t.x + t.dx
   t.y = t.y + t.dy

   -- stay pointing in movement direction
   if t.dx < 0 then
      t.left = true
      t.up = false
      t.down = false
   end
   if t.dx > 0 then
      t.left = false
      t.up = false
      t.down = false      
   end
   if t.dy < 0 then
      t.left = false      
      t.up = true
      t.down = false
   end
   if t.dy > 0 then
      t.left = false      
      t.up = false
      t.down = true
   end

   -- stop when we make it to a square
   if (t.x - originx) % 16 == 0 then
      t.dx = 0
   end
   if (t.y - originy) % 16 == 0 then
      t.dy = 0
   end

   -- if we are not moving, then wait a random time
   if t.dx == 0 and t.dy == 0 and not t.waiting then
      t.waiting = rnd(32)
   end

   if t.waiting then
      t.waiting = t.waiting - 1

      -- once we're done waiting...
      if t.waiting < 0 then
	 t.waiting = nil

	 -- troggles have a tendency to mess with the board
	 local i = ceil((t.x - originx) / 16 + 0.5)
	 local j = ceil((t.y - originy) / 16 + 0.5)
	 if i >= 1 and i <= cx and j >= 1 and j <= cy then
	    if board[i][j] then
	       fill_square(i,j)
	    end
	 end
	 
	 -- move in a random direction
	 local r = flr(rnd(4))
	 if r == 0 then t.dx =  1 end
	 if r == 1 then t.dx = -1 end
	 if r == 2 then t.dy =  1 end
	 if r == 3 then t.dy = -1 end	 
      end
   end

   -- troggles die when off the screen
   if t.x == originx - 16 then t.dead = true end
   if t.y == originy - 16then t.dead = true end
   if t.x == originx + 16*cx then t.dead = true end
   if t.y == originy + 16*cy then t.dead = true end

   if t.dead then
      del(troggles,t)
   end
end

function make_troggle(x,y)
   local t = {}
   t.x = x
   t.y = y
   t.dx = 0
   t.dy = 0
   add(troggles,t)
   return t
end

function make_random_troggle()
   local t = make_troggle(0,0)
   local r = flr(rnd(4))
   if r == 0 then t.dx =  1 end
   if r == 1 then t.dx = -1 end
   if r == 2 then t.dy =  1 end
   if r == 3 then t.dy = -1 end

   if t.dy ==  1 then t.y = originy-16 end
   if t.dy == -1 then t.y = originy+cy*16 end
   if t.dx ==  1 then t.x = originx-16 end
   if t.dx == -1 then t.x = originx+cx*16 end      
   
   if t.dy == 0 then
      t.y = originy + flr(rnd(cy)) * 16
   end
   
   if t.dx == 0 then
      t.x = originx + flr(rnd(cx)) * 16
   end

end

function fill_square(i,j)
   local desire = false   
   if flr(rnd(2)) == 1 then desire = true end
   local n
   repeat
      n = flr(rnd(199) - 99)
   until levels[level].f(n) == desire
   board[i][j] = n
end

function fill_board()
   for i=1,cx do
      board[i] = {}
      for j=1,cy do
	 fill_square(i,j)
      end      
   end
end

function reset_level()
   troggles = {}   
   fill_board()
   lives = lives + 1
   pl.dead = true
end

function _init()
   board = {}

   -- game stats
   score = 0
   level = 1
   lives = 1
   cheat_mode = false
   title_screen = false
   game_over = false
   game_over_counter = 0
   
   function disable_cheat_mode()
      cheat_mode = false
      menuitem(1, "enable hints", enable_cheat_mode)
   end
   function enable_cheat_mode()
      cheat_mode = true
      menuitem(1, "disable hints", disable_cheat_mode)
   end
   disable_cheat_mode()
   
   reset_level()
end

function print_center(str,y,col)
   local width = 4 * #str
   local x = 64 - 2 * #str
   print(str, x, y, col)   
end

function draw_title()
   local title = levels[level].title
   local width = 4 * #title
   local x = 64 - 2 * #title
   line(x, 8, x + width - 2, 8, 9 )
   line(x, 16, x + width - 2, 16, 9 )   
   print_center(title, 10, 7)
end

function draw_board()
   for i=1,cx do
      for j=1,cy do
	 if board[i][j] != false then
	    local text = tostr(board[i][j])
	    local width = 4 * #text - 2
	    local col = 6
	    if cheat_mode then
	       if board[i][j] and levels[level].f(board[i][j]) then col = 7 end
	       if board[i][j] and not levels[level].f(board[i][j]) then col = 5 end
	    end
	    print(tostr(board[i][j]),(i-1)*16 + originx + 8 - width/2,(j-1)*16 + originy + 6, col)
	 end
      end      
   end
end

function draw_player()
   local bottom = 16
   
   if pl.dx == 0 and pl.dy == 0 then
      bottom = 16
   else
      if (pl.x + pl.y) % 4 == 2 then
	 bottom = 18
      end
      if (pl.x + pl.y) % 4 == 0 then
	 bottom = 2
      end
   end
   
   pal(8,0)
   if pl.mouth_open then
      spr(4, pl.x, pl.y, 2, 1, pl.left)
      spr(bottom + 4, pl.x, pl.y + 8, 2, 1, pl.left)
   else
      spr(0, pl.x, pl.y, 2, 1, pl.left)      
      spr(bottom, pl.x, pl.y + 8, 2, 1, pl.left)
   end 
end

function collide_event(s,t)
   if s == pl then
      die()
      return
   end

   s.dead = true
end

function collide(s,t)
   local dx = s.x - t.x 
   local dy = s.y - t.y
   local delta = 1
   if s == pl then delta = 4 end
   if (abs(dx) < delta) then
      if (abs(dy) < delta) then
	 collide_event(s,t)
      end
   end
end

function collisions()
   if not pl.dead then
      for t in all(troggles) do
	 collide(pl,t)
      end
   end
   
   for t in all(troggles) do
      for s in all(troggles) do
	 if s ~= t and not s.dead and not t.dead then
	    collide(s,t)
	 end
      end
   end   
end

function is_level_won()
   for i=1,cx do
      for j=1,cy do
	 if board[i][j] != false then
	    if levels[level].f(board[i][j]) == true then
	       return false
	    end
	 end
      end      
   end
   
   return true
end

function _update()
   if title_screen then
      title_screen_update()
      return
   end

   -- when there aren't enough troggles...
   if making_troggle < 0 then
      if #troggles < levels[level].troggle_count then
	 -- sometimes make more
	 if rnd(100) < 1 then
	    making_troggle = 30
	 end
      end
   else
      making_troggle = making_troggle - 1
      if making_troggle <= 0 then
	 make_random_troggle()
	 making_troggle = -1
      end
   end
   
   if is_level_won() then
      sfx(3)
      level = min(level + 1, #levels)
      reset_level()
   end
   
   foreach(troggles, move_troggle)
   collisions()

   if game_over then
      game_over_counter = game_over_counter + 1

      if (btn(4) or btn(5)) then
	 _init()
      end
      return
   end
   
   if pl.dead then
      if (btn(4) or btn(5)) then
	 pl.dead = false
	 pl.resurrecting = true
	 sfx(5)
	 -- BADBAD: move to a safe space
	 lives = lives - 1
      end
      return
   end

   if pl.resurrecting then
      if not (btn(4) or btn(5)) then
	 pl.resurrecting = false
      end
   end

   if (btn(0)) then pl.dx=-1 end
   if (btn(1)) then pl.dx= 1 end
   if (btn(2)) then pl.dy=-1 end
   if (btn(3)) then pl.dy= 1 end
   
   -- Move in the desired direction
   pl.x = pl.x + 2*pl.dx
   pl.y = pl.y + 2*pl.dy
   
   -- Do not walk off the screen
   if pl.x < originx then pl.x = originx end
   if pl.y < originy then pl.y = originy end
   if pl.x > originx + 16*(cx-1) then pl.x = originx + 16*(cx-1) end
   if pl.y > originy + 16*(cy-1) then pl.y = originy + 16*(cy-1) end  
   
   -- stay pointing in movement direction
   if pl.dx < 0 then
      pl.left = true
   end
   if pl.dx > 0 then
      pl.left = false
   end
   
   -- stop when we make it to a square
   if (pl.x - originx) % 16 == 0 then
      pl.dx = 0
   end
   if (pl.y - originy) % 16 == 0 then
      pl.dy = 0
   end
   
   -- handle eating
   if (btn(4) or btn(5)) and not pl.resurrecting then
      if not pl.mouth_open then
	 sfx(0)
      end
      pl.mouth_open=true
   end

   local i = ceil((pl.x - originx) / 16 + 0.5)
   local j = ceil((pl.y - originy) / 16 + 0.5)
   if not (btn(4) or btn(5)) then
      if pl.mouth_open and board[i][j] != false then
	 eat(board[i][j])
	 board[i][j] = false
      end
      pl.mouth_open=false	    
   end

end

function print_troggle_warning()
   local y = 40
   local x = 6
   local height = 6
   print("t",x,y,7) ; y = y + height
   print("r",x,y,7) ; y = y + height
   print("o",x,y,7) ; y = y + height
   print("g",x,y,7) ; y = y + height
   print("g",x,y,7) ; y = y + height
   print("l",x,y,7) ; y = y + height
   print("e",x,y,7) ; y = y + height
   print("!",x,y,7) ; y = y + height           
end

function _draw()
   if title_screen then
      title_screen_draw()
      return
   end

   if game_over then
      fade_scr(game_over_counter/10)
   end
   
   camera (0, 0)
   rectfill (0,0,127,127,0) 
   map(0,0, 0,0, 16,16)

   if not game_over and making_troggle > 0 then
      fade_scr(making_troggle / 30)
      print_troggle_warning()
      fade_scr(0)            
   end

   if not pl.dead then
      draw_player()
   end
   
   draw_board()
   clip(originx + 1,originy + 1, cx*16 - 1, cy*16 - 1)   
   foreach(troggles, draw_troggle)
   clip()

   fade_scr(0)
   
   print("score " .. tostr(score), 0, 116, 7)
   print_center("level " .. tostr(level),2,5)
   draw_title()

   pl.bounce = pl.bounce + 1
   if pl.bounce == 6 then
      pl.bounce = 0
      pl.offset = 1 - pl.offset
   end

   for i = 1,lives do
      if i == lives and pl.dead then
	 camera (0, pl.offset)
      end
      pal(8,0)      
      spr(0, 30 + 16 * i, 128-16, 2, 2)
   end

   if game_over then
      fade_scr(1.0 - (min(game_over_counter,20)/20))
      print_center("game over",50,7)
   end   
end

pl.x = -16
frame_count = 0
function title_screen_update()
   frame_count = frame_count + 1
   if frame_count % 2 == 0 then
      pl.dx = 2
      pl.x = pl.x + pl.dx
   end
   if pl.x > 128 + 16 then pl.x = -16 end

   pl.mouth_open = (frame_count % 30) / 30 < 0.5
end

function title_screen_draw()
   cls()
   print_center("number lunchers",35,7)

   draw_player()
end

function fade_scr(fa)
   fa=max(min(1,fa),0)
   local fn=8
   local pn=15
   local fc=1/fn
   local fi=flr(fa/fc)+1
   local fades={
      {1,1,1,1,0,0,0,0},
      {2,2,2,1,1,0,0,0},
      {3,3,4,5,2,1,1,0},
      {4,4,2,2,1,1,1,0},
      {5,5,2,2,1,1,1,0},
      {6,6,13,5,2,1,1,0},
      {7,7,6,13,5,2,1,0},
      {8,8,9,4,5,2,1,0},
      {9,9,4,5,2,1,1,0},
      {10,15,9,4,5,2,1,0},
      {11,11,3,4,5,2,1,0},
      {12,12,13,5,5,2,1,0},
      {13,13,5,5,2,1,1,0},
      {14,9,9,4,5,2,1,0},
      {15,14,9,4,5,2,1,0}
   }
   
   for n=1,pn do
      pal(n,fades[n][fi],0)
   end
end

__gfx__
00000000000000000388888888888330000000770770000003888888888800000000000000000000000000000000000000000000eeeeeeeeeeeeeeee00000000
00000077077000000333333333333330000000780780000003888888888883300000000000000000000000000000000000000000e00000000000000000000000
00000078078000000000030030000000033333773773000003888888888883300000000000000000000000000000000000000000e00000000000000000000000
00000077077000000000030030000000038833333333000003333333333333300000000000000000000000000000000000000000e00000000000000000000000
03333333333300000000030030000000038833333333000000000300300000000000000000000000000000000000000000000000e00000000000000000000000
03333333333300000000030033330000038888888888000000000300333300000000000000000000000000000000000000000000e00000000000000000000000
03883333333300000000030000000000038888888888000000000300000000000000000000000000000000000000000000000000e00000000000000000000000
03883333333300000033330000000000038888888888000000333300000000000000000000000000000000000000000000000000e00000000000000000000000
03888888888803300388888888888330038888888888000003888888888800000000000000000000000000000000000000000000e0000000e000000000000000
03333333333333300333333333333330038888888888833003888888888883300000000000000000000000000000000000000000e00000000000000000000000
00000300300000000000030030000000038888888888833003888888888883300000000000000000000000000000000000000000e00000000000000000000000
00000300300000000000030030000000033333333333333003333333333333300000000000000000000000000000000000000000e00000000000000000000000
00000300300000000000030030000000000003003000000000000300300000000000000000000000000000000000000000000000e00000000000000000000000
00000300300000000033330030000000000003003000000000333300300000000000000000000000000000000000000000000000e00000000000000000000000
00000300300000000000000030000000000003003000000000000000300000000000000000000000000000000000000000000000e00000000000000000000000
00333300333300000000000033330000003333003333000000000000333300000000000000000000000000000000000000000000e00000000000000000000000
00000000000000000222228882222220000000000000000002888222222888200000000000000000022222222222222000000000000000000000000000000000
00002222222200000222222888778870000022222222000002288778877882200000222222220000022222222222222000000000000000000000000000000000
00022222222220000222222888888800000222222222200002288888888882200002222222222000022222222222222000000000000000000000000000000000
00222228888880000022222227887700002288888888220000227887788722000022222222222200002222222222220000000000000000000000000000000000
00222227778777000022222222222200002277788777220000222222222222000022222222222200002222222222220000000000000000000000000000000000
00222227878787000002220022222000002278788787220000000222222220000022222222222200000002222222200000000000000000000000000000000000
02222222222222200000222002200000022222222222222000002220022000000222222222222220000022200220000000000000000000000000000000000000
02222282222222200000000002220000028222222222282000000000022200000222222222222220000000000222000000000000000000000000000000000000
02222288822222200222228882222220028882222228882002888222222888200222222222222220022222222222222000000000000000000000000000000000
02222228887788700222222888778870022887788778822002288778877882200222222222222220022222222222222000000000000000000000000000000000
02222228888888000222222888888800022888888888822002288888888882200222222222222220022222222222222000000000000000000000000000000000
00222222278877000022222227887700002278877887220000227887788722000022222222222200002222222222220000000000000000000000000000000000
00222222222222000022222222222200002222222222220000222222222222000022222222222200002222222222220000000000000000000000000000000000
00022222222220000002222222200000000222222222200000022222222000000002222222222000000222222220000000000000000000000000000000000000
00002200022000000000220002220000000002200220000000000220022200000000022002200000000002200222000000000000000000000000000000000000
00002220022200000000222000000000000022200222000000002220000000000000222002220000000022200000000000000000000000000000000000000000
__map__
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f0d0e0d0e0d0e0d0e0d0e0d0e1d0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f1d0f1d0f1d0f1d0f1d0f1d0f1d0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f0d0e0d0e0d0e0d0e0d0e0d0e1d0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f1d0f1d0f1d0f1d0f1d0f1d0f1d0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f0d0e0d0e0d0e0d0e0d0e0d0e1d0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f0f1d0f1d0f1d0f1d0f1d0f1d0f1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000d0e0d0e0d0e0d0e0d0e0d0e1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001d0f1d0f1d0f1d0f1d0f1d0f1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000d0e0d0e0d0e0d0e0d0e0d0e1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001d0f1d0f1d0f1d0f1d0f1d0f1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000e0e0e0e0e0e0e0e0e0e0e0e1e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010500000c4141c4121f4150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010500002b0541c042007350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
012500000746200460004500044500030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010c00000c1500e050101501105010150110501315013050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000001a5621a1151d5621d115215621d1151d5621a1151a5621a1151d5621d1151a5621a11518562181151a5621a1151c5621a1151a56218515185621a5151a5621a565000000000000000000000000000000
010500000c05018550247473055500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010200000010000100002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
04 02044040
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000

